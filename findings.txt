The results showed that:

1. Impossible Puzzle to Solve: mystery2.dat
2. Very Hard Puzzle to Solve: mystery1.dat
3. Hard Puzzle to Solve: mystery3.dat

This was discovered from solve_board returning false for mystery2.dat
only, and measuring recursion depth along with time to solve for each board.

The program main.cpp output is as follows:

=================== Question 5 ===================

Loading Sudoku board from file 'mystery1.dat'... Success!

Displaying unsolved Sudoku board mystery1 with display_board():
    1   2   3   4   5   6   7   8   9
  +===========+===========+===========+
A | 8 : 1 :   |   :   : 6 | 2 :   :   |
  +---+---+---+---+---+---+---+---+---+
B |   :   :   |   : 1 :   |   : 6 :   |
  +---+---+---+---+---+---+---+---+---+
C | 7 :   :   |   : 3 :   |   :   : 9 |
  +===========+===========+===========+
D |   :   :   |   :   :   |   :   :   |
  +---+---+---+---+---+---+---+---+---+
E |   : 7 : 2 |   :   :   | 9 : 1 :   |
  +---+---+---+---+---+---+---+---+---+
F |   :   :   | 4 :   : 2 |   :   :   |
  +===========+===========+===========+
G |   :   :   |   : 2 :   |   :   : 4 |
  +---+---+---+---+---+---+---+---+---+
H |   : 9 :   |   : 5 :   |   :   :   |
  +---+---+---+---+---+---+---+---+---+
I |   :   : 5 |   :   : 8 |   : 3 : 6 |
  +===========+===========+===========+
The 'mystery1' board has a solution:
    1   2   3   4   5   6   7   8   9
  +===========+===========+===========+
A | 8 : 1 : 9 | 7 : 4 : 6 | 2 : 5 : 3 |
  +---+---+---+---+---+---+---+---+---+
B | 5 : 2 : 3 | 8 : 1 : 9 | 4 : 6 : 7 |
  +---+---+---+---+---+---+---+---+---+
C | 7 : 6 : 4 | 2 : 3 : 5 | 1 : 8 : 9 |
  +===========+===========+===========+
D | 6 : 5 : 8 | 9 : 7 : 1 | 3 : 4 : 2 |
  +---+---+---+---+---+---+---+---+---+
E | 4 : 7 : 2 | 5 : 6 : 3 | 9 : 1 : 8 |
  +---+---+---+---+---+---+---+---+---+
F | 9 : 3 : 1 | 4 : 8 : 2 | 6 : 7 : 5 |
  +===========+===========+===========+
G | 1 : 8 : 6 | 3 : 2 : 7 | 5 : 9 : 4 |
  +---+---+---+---+---+---+---+---+---+
H | 3 : 9 : 7 | 6 : 5 : 4 | 8 : 2 : 1 |
  +---+---+---+---+---+---+---+---+---+
I | 2 : 4 : 5 | 1 : 9 : 8 | 7 : 3 : 6 |
  +===========+===========+===========+
Time taken: 0.041429 s

Recursion depth: 58
Backwards recurse count: 54660

Loading Sudoku board from file 'mystery2.dat'... Success!

Displaying unsolved Sudoku board mystery2 with display_board():
    1   2   3   4   5   6   7   8   9
  +===========+===========+===========+
A |   : 7 :   |   :   : 6 |   :   :   |
  +---+---+---+---+---+---+---+---+---+
B | 9 :   :   |   :   :   |   : 4 : 1 |
  +---+---+---+---+---+---+---+---+---+
C |   :   : 8 |   :   : 9 |   : 5 :   |
  +===========+===========+===========+
D |   : 9 :   |   :   : 7 |   :   : 2 |
  +---+---+---+---+---+---+---+---+---+
E |   :   : 3 |   :   :   | 8 :   :   |
  +---+---+---+---+---+---+---+---+---+
F | 4 :   :   | 8 :   :   |   : 1 :   |
  +===========+===========+===========+
G |   : 8 :   | 3 :   :   | 9 :   :   |
  +---+---+---+---+---+---+---+---+---+
H | 1 : 6 :   |   :   :   |   :   : 7 |
  +---+---+---+---+---+---+---+---+---+
I |   :   :   | 5 :   :   |   : 8 :   |
  +===========+===========+===========+
A solution cannot be found.
    1   2   3   4   5   6   7   8   9
  +===========+===========+===========+
A |   : 7 :   |   :   : 6 |   :   :   |
  +---+---+---+---+---+---+---+---+---+
B | 9 :   :   |   :   :   |   : 4 : 1 |
  +---+---+---+---+---+---+---+---+---+
C |   :   : 8 |   :   : 9 |   : 5 :   |
  +===========+===========+===========+
D |   : 9 :   |   :   : 7 |   :   : 2 |
  +---+---+---+---+---+---+---+---+---+
E |   :   : 3 |   :   :   | 8 :   :   |
  +---+---+---+---+---+---+---+---+---+
F | 4 :   :   | 8 :   :   |   : 1 :   |
  +===========+===========+===========+
G |   : 8 :   | 3 :   :   | 9 :   :   |
  +---+---+---+---+---+---+---+---+---+
H | 1 : 6 :   |   :   :   |   :   : 7 |
  +---+---+---+---+---+---+---+---+---+
I |   :   :   | 5 :   :   |   : 8 :   |
  +===========+===========+===========+
Time taken: 0.004361 s

Recursion depth: 0
Backwards recurse count: 6462

Loading Sudoku board from file 'mystery3.dat'... Success!

Displaying unsolved Sudoku board mystery3 with display_board():
    1   2   3   4   5   6   7   8   9
  +===========+===========+===========+
A |   :   :   |   :   :   |   :   :   |
  +---+---+---+---+---+---+---+---+---+
B |   : 2 :   | 5 :   : 4 |   : 7 :   |
  +---+---+---+---+---+---+---+---+---+
C | 7 :   : 5 |   :   :   | 1 :   : 8 |
  +===========+===========+===========+
D |   : 6 :   |   : 8 :   |   : 9 :   |
  +---+---+---+---+---+---+---+---+---+
E |   :   :   | 4 :   : 2 |   :   :   |
  +---+---+---+---+---+---+---+---+---+
F |   : 9 :   |   : 3 :   |   : 5 :   |
  +===========+===========+===========+
G | 8 :   : 9 |   :   :   | 6 :   : 3 |
  +---+---+---+---+---+---+---+---+---+
H |   : 5 :   | 9 :   : 8 |   : 2 :   |
  +---+---+---+---+---+---+---+---+---+
I |   :   :   |   :   :   |   :   :   |
  +===========+===========+===========+
The 'mystery3' board has a solution:
    1   2   3   4   5   6   7   8   9
  +===========+===========+===========+
A | 9 : 1 : 4 | 8 : 7 : 3 | 5 : 6 : 2 |
  +---+---+---+---+---+---+---+---+---+
B | 6 : 2 : 8 | 5 : 1 : 4 | 3 : 7 : 9 |
  +---+---+---+---+---+---+---+---+---+
C | 7 : 3 : 5 | 6 : 2 : 9 | 1 : 4 : 8 |
  +===========+===========+===========+
D | 3 : 6 : 7 | 1 : 8 : 5 | 2 : 9 : 4 |
  +---+---+---+---+---+---+---+---+---+
E | 5 : 8 : 1 | 4 : 9 : 2 | 7 : 3 : 6 |
  +---+---+---+---+---+---+---+---+---+
F | 4 : 9 : 2 | 7 : 3 : 6 | 8 : 5 : 1 |
  +===========+===========+===========+
G | 8 : 4 : 9 | 2 : 5 : 7 | 6 : 1 : 3 |
  +---+---+---+---+---+---+---+---+---+
H | 1 : 5 : 3 | 9 : 6 : 8 | 4 : 2 : 7 |
  +---+---+---+---+---+---+---+---+---+
I | 2 : 7 : 6 | 3 : 4 : 1 | 9 : 8 : 5 |
  +===========+===========+===========+
Time taken: 0.016556 s

Recursion depth: 57
Backwards recurse count: 19210

=================== Question 5 ===================

As was visually validated online (https://www.sudoku-solutions.com)
the solutions for mystery1.dat and mystery3.dat are
valid. mystery2.dat was similarly validated as unsolvable.

In main.cpp, I measured the time taken for calling the solve_board
function:
- mystery1.dat took 0.041429s to solve.
- mystery2.dat took 0.004361s to find out that the puzzle was
impossible.
- mystery3.dat took 0.016556s to solve.

I inferred that the longer a puzzle took to be solved, the harder it
was. Challenging sudoku puzzles are not under constrained, i.e
have many possible solutions. They require exploring longer, precise
sequences of moves and have typically one solution. As such, measuring
time would be a good indicator of difficulty, as the number of
instructions to be executed to exhaust all possible solution moves
would be larger.

As such, we can infer from the data that the board which takes the
least time to complete solve_board is likely to be the impossible puzzle.
This is because the algorithm quickly discovers that there are not
any possible solution moves i.e make_move returns false for all positions
quite early in the program. This explains the large time difference
between solving mystery3.dat and mystery2.dat (the unsolvable puzzle);
it takes a factor of 3 times longer to solve.

The number of missing digits in each 'mystery' file is:
mystery1 - 58
mystery2 - 57
mystery3 - 57

This shows that they are all similarly difficult-to-solve puzzles on
the surface, and so this was used as a guide measure of
difficulty. It would make sense that for solvable puzzles, that the
recursion depth would equal these numbers for solvable puzzles.

The recursion depths are provided below:
mystery1 - 58
mystery2 - 0
mystery3 - 57

This provides a more precise measure of difficulty for the puzzle,
providing additional data for whether a puzzle is unsolvable (compared to
only the number of missing digits). So in fact, even without looking at the
return value of solve_board, we can see that mystery2 is unsolvable as
its recursion depth is 0.

We can see also that the recursion depth is marginally larger for
mystery1 than mystery3, and even this small difference would mean an
exponential increase in possible moves. Hence as more moves are
possible, and we expect only one valid solution, we can predict
mystery1 to be the very hard puzzle, and mystery3 to be the hard puzzle.

The backwards recurse count similarly assesses the difficulty of
puzzles.

The backwards recurse counts are provided below:
mystery1 - 54660
mystery2 - 6462
mystery3 - 19210

This shows in more detail how the number of instructions executed to
complete solve_board increases exponentially with the backwards
recurse count. It's also closely correlated with the timing results
(as expected). We can infer that mystery2 was either impossible or
easy to solve, and to distinguish between the two cases we could
combine this metric with the recursion depth, or return value. But we
can see clearly that mystery1 is harder to solve than mystery3 by the
large difference of 35450.
